import warnings
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ConversationHandler, \
    ContextTypes, filters

warnings.filterwarnings("ignore", category=UserWarning)

SELECT_CLASS, SELECT_TIME, SELECT_PICKUP_ADDRESS, SELECT_DROP_ADDRESS, SELECT_DETAILS, SELECT_PAYMENT, EDIT_ORDER, UPDATE_FIELD ,EDIT_CLASS = range(9)
def generate_order_number():
    return random.randint(100000, 999999)


def build_order_summary(context):
    return (f"üü¢ –ü–æ–∏—Å–∫ –≤–æ–¥–∏—Ç–µ–ª—è\n"
            f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {context.user_data['order_number']}\n"
            f"‚Ä¢ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {context.user_data.get('time', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"‚Ä¢ –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {context.user_data.get('class', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"‚Ä¢ –û—Ç–∫—É–¥–∞: {context.user_data.get('pickup_address', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"‚Ä¢ –ö—É–¥–∞: {context.user_data.get('drop_address', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"‚Ä¢ –û–ø–ª–∞—Ç–∞: {context.user_data.get('payment', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: {context.user_data.get('details', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n")


def build_keyboard(buttons):
    return InlineKeyboardMarkup([[InlineKeyboardButton(text, callback_data=callback)] for text, callback in buttons])


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ /start
    context.user_data.clear()

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
    context.user_data['order_number'] = generate_order_number()

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_message = (
        f"  üëã–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
        f"  –í–∞—à –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: *{context.user_data['order_number']}*\n"
         "  –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –≤–∞—à–µ–π –ø–æ–µ–∑–¥–∫–∏:"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∫–ª–∞—Å—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    await update.message.reply_text(
        welcome_message,
        reply_markup=build_keyboard([
            ("üöï –°—Ç–∞–Ω–¥–∞—Ä—Ç", 'standard'),
            ("üöô –ö–æ–º—Ñ–æ—Ä—Ç", 'comfort'),
            ("üèé –ë–∏–∑–Ω–µ—Å", 'business'),
            ("‚≠êÔ∏è –ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π", 'premium'),
            ("üöê –ú–∏–Ω–∏–≤–µ–Ω", 'minivan'),
            ("üíé V-class", 'v_class')
        ]),
        parse_mode='Markdown'
    )
    return SELECT_CLASS

async def select_class(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['class'] = update.callback_query.data
    await update.callback_query.answer()
    await update.callback_query.edit_message_text('üìÖ –ö–æ–≥–¥–∞ –≤–∞–º –Ω—É–∂–Ω–∞ –º–∞—à–∏–Ω–∞? –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.')
    return SELECT_TIME

async def select_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['time'] = update.message.text
    await update.message.reply_text('üìç –û—Ç–∫—É–¥–∞ –≤–∞—Å –∑–∞–±—Ä–∞—Ç—å? –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å.')
    return SELECT_PICKUP_ADDRESS

async def select_pickup_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['pickup_address'] = update.message.text
    await update.message.reply_text('‚û°Ô∏è –ö—É–¥–∞ –≤–∞—Å –æ—Ç–≤–µ–∑—Ç–∏? –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å.')
    return SELECT_DROP_ADDRESS

async def select_drop_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['drop_address'] = update.message.text
    await update.message.reply_text('üìù –£–∫–∞–∂–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è.')
    return SELECT_DETAILS

async def select_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['details'] = update.message.text
    await update.message.reply_text('üíµ –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –∑–∞–∫–∞–∑–∞.')
    return SELECT_PAYMENT

async def select_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã, –µ—Å–ª–∏ –æ–Ω–æ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    if 'payment' not in context.user_data:
        context.user_data['payment'] = update.message.text
    await update.message.reply_text(
        build_order_summary(context),
        reply_markup=build_keyboard([
            ("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑", 'confirm'),
            (" –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∞—Å—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è", 'edit_class'),
            (" –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è", 'edit_time'),
            (" –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è", 'edit_pickup'),
            (" –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è", 'edit_drop'),
            (" –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è", 'edit_details'),
            (" –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É–º–º—É", 'edit_payment')

        ])
    )
    return EDIT_ORDER

async def edit_order_field(update: Update, context: ContextTypes.DEFAULT_TYPE, field, prompt):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(prompt)
    context.user_data['edit_field'] = field
    return UPDATE_FIELD


async def edit_class(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await edit_order_field(update, context, 'class', 'üöò –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è: standard | comfort | minivan | business | premium | V class')

async def edit_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await edit_order_field(update, context, 'time', 'üìÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É:')

async def edit_pickup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await edit_order_field(update, context, 'pickup_address', 'üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:')

async def edit_drop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await edit_order_field(update, context, 'drop_address', '‚û°Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:')

async def edit_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await edit_order_field(update, context, 'details', 'üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è:')

async def edit_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await edit_order_field(update, context, 'payment', 'üíµ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É:')

async def update_order_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_value = update.message.text
    field = context.user_data['edit_field']
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω—è–µ–º–æ–µ –ø–æ–ª–µ
    if field in context.user_data:
        context.user_data[field] = new_value
    await update.message.reply_text('‚úÖ –ó–∞–∫–∞–∑ –∏–∑–º–µ–Ω–µ–Ω.')
    return await select_payment(update, context)


orders = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
order_counter = 0  # –°—á–µ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–æ–≤

async def confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global order_counter
    query = update.callback_query
    order_summary = build_order_summary(context)

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
    order_counter += 1
    new_order = {
        'order_number': order_counter,
        'client_chat_id': update.effective_chat.id,
        'status': '–í –æ–∂–∏–¥–∞–Ω–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è',
        'summary': order_summary
    }
    orders.append(new_order)

    CHANNEL_ID = -1002477998663  # –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π ID –∫–∞–Ω–∞–ª–∞
    keyboard = [[InlineKeyboardButton("üöó –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑", callback_data=f'accept_order_{order_counter}')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç-–ø–æ–¥—Å–∫–∞–∑–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await context.bot.send_message(
        chat_id=CHANNEL_ID,
        text=f"{order_summary}\n\n‚ÑπÔ∏è –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑:",
        reply_markup=reply_markup
    )
    await query.edit_message_text('–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª! üéâ')

    print(f"client_chat_id —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {new_order['client_chat_id']}")  # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    return ConversationHandler.END


async def accept_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    order_number = int(query.data.split('_')[2])

    # –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑ –ø–æ –Ω–æ–º–µ—Ä—É
    for order in orders:
        if order['order_number'] == order_number and order['status'] == '–í –æ–∂–∏–¥–∞–Ω–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è':
            order['status'] = '–ü—Ä–∏–Ω—è—Ç'
            context.user_data['driver_chat_id'] = update.effective_chat.id
            driver_username = query.from_user.username
            client_chat_id = order['client_chat_id']

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–æ–¥–∏—Ç–µ–ª—è –∏ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
            context.user_data['driver_chat_id'] = update.effective_chat.id
            context.user_data['order_number'] = order_number  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞

            # –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–∫–Ω–æ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã, –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f'{order["summary"]}\n\n ‚ÑπÔ∏è –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑:',
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f'cancel_order_{order_number}')]]
                )
            )

            await context.bot.send_message(chat_id=client_chat_id, text=f'üöñ –í–æ–¥–∏—Ç–µ–ª—å @{driver_username} –ø—Ä–∏–Ω—è–ª –≤–∞—à –∑–∞–∫–∞–∑ #{order_number}!')
            await query.delete_message()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞
            break
    else:
        await query.answer('–û—à–∏–±–∫–∞: –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –ø—Ä–∏–Ω—è—Ç.')


async def cancel_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    order_number = int(query.data.split('_')[2])
    # –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑ –∏ –æ—Ç–º–µ–Ω—è–µ–º –µ–≥–æ
    for order in orders:
        if order['order_number'] == order_number:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –≤–æ–¥–∏—Ç–µ–ª—å —Ç–µ–º, –∫—Ç–æ –ø—Ä–∏–Ω—è–ª –∑–∞–∫–∞–∑
            if context.user_data.get('driver_chat_id') == update.effective_chat.id:
                order['status'] = '–í –æ–∂–∏–¥–∞–Ω–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è'  # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ '–í –æ–∂–∏–¥–∞–Ω–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è'
                client_chat_id = order['client_chat_id']

                await context.bot.send_message(
                    chat_id=client_chat_id,
                    text="üõë –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –ò—â–µ–º –¥—Ä—É–≥–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è."
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ –∫–∞–Ω–∞–ª
                await context.bot.send_message(
                    chat_id=-1002477998663,
                    text=f"{order['summary']}\n\n‚ÑπÔ∏è –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑:",
                    reply_markup=InlineKeyboardMarkup(
                        [[InlineKeyboardButton("üöó –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑", callback_data=f'accept_order_{order_number}')]]
                    )
                )

                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å"
                await query.delete_message()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å"

                return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É

            else:
                await query.answer('–û—à–∏–±–∫–∞: –£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Ç–º–µ–Ω—É —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞.')
            break
    else:
        await query.answer('–û—à–∏–±–∫–∞: –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.')



def main():
    application = ApplicationBuilder().token("7214937350:AAH-CIKNwXmVod8FQwSGQS4vGVGqRKzTwGc").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SELECT_CLASS: [CallbackQueryHandler(select_class)],
            SELECT_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_time)],
            SELECT_PICKUP_ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_pickup_address)],
            SELECT_DROP_ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_drop_address)],
            SELECT_DETAILS: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_details)],
            SELECT_PAYMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_payment)],
            EDIT_ORDER: [CallbackQueryHandler(edit_class, pattern='edit_class'),
                         CallbackQueryHandler(edit_time, pattern='edit_time'),
                         CallbackQueryHandler(edit_pickup, pattern='edit_pickup'),
                         CallbackQueryHandler(edit_drop, pattern='edit_drop'),
                         CallbackQueryHandler(edit_details, pattern='edit_details'),
                         CallbackQueryHandler(edit_payment, pattern='edit_payment'),
                         CallbackQueryHandler(confirm_order, pattern='confirm')],

            UPDATE_FIELD: [MessageHandler(filters.TEXT & ~filters.COMMAND, update_order_field)],
        },
        fallbacks=[CommandHandler('start', start)]
    )

    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(accept_order, pattern='accept_order'))
    application.add_handler(CallbackQueryHandler(cancel_order, pattern='cancel_order'))

    application.run_polling()


if __name__ == '__main__':
    main()